/**
 * Common utilities and patterns for WordPress API services
 * Provides reusable functions and atom factories for medical application
 */

import { atom } from 'jotai';
import { atomFamily } from 'jotai/utils';
import { fetchWPData, FetchOptions, QueryParams } from './cache';
import { WPPost, WPPage, WPDoctor, WPSearchResult, WPEmbedded, WPFeaturedMedia, WPTerm } from './wp-types';

/**
 * Common WordPress API endpoints
 */
export const WP_ENDPOINTS = {
  POSTS: 'wp-json/wp/v2/posts',
  PAGES: 'wp-json/wp/v2/pages',
  DOCTORS: '/wp-json/wp/v2/info-bacsi',
  SEARCH: '/wp-json/wp/v2/search',
} as const;

/**
 * Default embed parameters for WordPress API
 */
export const DEFAULT_EMBED = 'wp:term,wp:featuredmedia';
export const DOCTOR_EMBED = 'wp:featuredmedia,wp:term';

/**
 * Enhanced doctor fields to ensure all custom fields are fetched
 * Note: _embedded is not included here as it's generated by _embed parameter
 */
export const DOCTOR_FIELDS = [
  'id',
  'title',
  'content',
  'date',
  'modified',
  'slug',
  'status',
  'link',
  'featured_media',
  'meta',
  '_links',
  // Custom doctor fields
  'bacsi_chucdanh',
  'bacsi_chuyenmon',
  'bacsi_donvi',
  'bacsi_kinhnghiem',
  'bacsi_ngonngu',
  'bacsi_trangthai',
  'bacsi_hocvan',
  'bacsi_bangcap',
  'bacsi_phongkham',
  'bacsi_lichkham',
  'bacsi_phikham',
  'bacsi_dienthoai',
  'bacsi_email',
  'bacsi_facebook',
  'bacsi_zalo',
  'bacsi_website',
  'bacsi_diachi',
  'bacsi_mota',
  'bacsi_thutu',
  // Legacy contact fields
  'phone',
  'email',
  'facebook',
  'zalo',
  'website',
  'department',
].join(',');

/**
 * Common query parameter builders
 */
export const buildPostsParams = (params: { type?: string; per_page?: number; page?: number }): QueryParams => ({
  _embed: DEFAULT_EMBED,
  ...params,
});

export const buildPagesParams = (params: {
  parent?: number | string;
  per_page?: number;
  page?: number;
}): QueryParams => ({
  type: 'page',
  _embed: DEFAULT_EMBED,
  ...params,
});

export const buildDoctorsParams = (
  params: {
    per_page?: number;
    page?: number;
    include_all_fields?: boolean;
  } = {}
): QueryParams => ({
  _embed: DOCTOR_EMBED,
  _fields: params.include_all_fields !== false ? DOCTOR_FIELDS : undefined,
  per_page: params.per_page || 100,
  ...params,
});

export const buildSearchParams = (
  keyword: string,
  params: {
    per_page?: number;
  } = {}
): QueryParams => ({
  search: keyword,
  _embed: 'true',
  per_page: params.per_page || 100,
  ...params,
});

/**
 * Generic fetch functions for different WordPress content types
 */

/**
 * Fetch multiple posts with type safety
 */
export const fetchPosts = async (
  params: { type?: string; per_page?: number; page?: number } = {},
  options?: FetchOptions
): Promise<WPPost[]> => {
  return fetchWPData<WPPost[]>(WP_ENDPOINTS.POSTS, buildPostsParams(params), options);
};

/**
 * Fetch single post by ID
 */
export const fetchPost = async (id: number, options?: FetchOptions): Promise<WPPost> => {
  return fetchWPData<WPPost>(`${WP_ENDPOINTS.POSTS}/${id}`, { _embed: DEFAULT_EMBED }, options);
};

/**
 * Fetch multiple pages with type safety
 */
export const fetchPages = async (
  params: { parent?: number | string; per_page?: number; page?: number },
  options?: FetchOptions
): Promise<WPPage[]> => {
  return fetchWPData<WPPage[]>(WP_ENDPOINTS.PAGES, buildPagesParams(params), options);
};

/**
 * Fetch single page by ID
 */
export const fetchPage = async (id: number, options?: FetchOptions): Promise<WPPage> => {
  return fetchWPData<WPPage>(`${WP_ENDPOINTS.PAGES}/${id}`, { _embed: DEFAULT_EMBED }, options);
};

/**
 * Fetch multiple doctors
 */
export const fetchDoctors = async (
  params: { per_page?: number; page?: number } = {},
  options?: FetchOptions
): Promise<WPDoctor[]> => {
  return fetchWPData<WPDoctor[]>(WP_ENDPOINTS.DOCTORS, buildDoctorsParams(params), options);
};

/**
 * Fetch single doctor by ID
 */
export const fetchDoctor = async (id: number, options?: FetchOptions): Promise<WPDoctor> => {
  return fetchWPData<WPDoctor>(
    `${WP_ENDPOINTS.DOCTORS}/${id}`,
    {
      _embed: DOCTOR_EMBED,
      _fields: DOCTOR_FIELDS,
    },
    options
  );
};

/**
 * Fetch search results
 */
export const fetchSearchResults = async (
  keyword: string,
  params: { per_page?: number } = {},
  options?: FetchOptions
): Promise<WPSearchResult[]> => {
  return fetchWPData<WPSearchResult[]>(WP_ENDPOINTS.SEARCH, buildSearchParams(keyword, params), options);
};

/**
 * Generic atom factories for different content types
 */

/**
 * Create atom family for fetching multiple items
 */
export function createListAtomFamily<TParams, TResult>(
  fetchFunction: (params: TParams, options?: FetchOptions) => Promise<TResult>
) {
  return atomFamily((params: TParams) => atom(async () => await fetchFunction(params)));
}

/**
 * Create atom family for fetching single items by ID
 */
export function createItemAtomFamily<TResult>(fetchFunction: (id: number, options?: FetchOptions) => Promise<TResult>) {
  return atomFamily((id: number) => atom(async () => await fetchFunction(id)));
}

/**
 * Create atom for fetching data without parameters
 */
export function createSimpleAtom<TResult>(fetchFunction: (options?: FetchOptions) => Promise<TResult>) {
  return atom(async () => await fetchFunction());
}

/**
 * Utility functions for data transformation and validation
 */

/**
 * Extract featured image URL from WordPress embedded data
 */
export const extractFeaturedImageUrl = (embedded?: WPEmbedded): string | null => {
  return embedded?.['wp:featuredmedia']?.[0]?.source_url || null;
};

/**
 * Extract categories from WordPress embedded data
 */
export const extractCategories = (embedded?: WPEmbedded): Array<{ id: number; name: string; slug: string }> => {
  const terms = embedded?.['wp:term']?.[0];
  return terms ? Array.from(terms) : [];
};

/**
 * Clean HTML content and extract plain text
 */
export const extractPlainText = (htmlContent: string): string => {
  // Remove HTML tags and decode entities
  return htmlContent
    .replace(/<[^>]*>/g, '')
    .replace(/&nbsp;/g, ' ')
    .replace(/&amp;/g, '&')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .replace(/&#039;/g, "'")
    .trim();
};

/**
 * Truncate text to specified length with ellipsis
 */
export const truncateText = (text: string, maxLength: number): string => {
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength).trim() + '...';
};

/**
 * Format date for medical UI context
 */
export const formatMedicalDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('vi-VN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};

/**
 * Validate WordPress content structure
 */
export const isValidWPContent = (content: unknown): boolean => {
  return (
    content !== null &&
    content !== undefined &&
    typeof content === 'object' &&
    'id' in (content as object) &&
    typeof (content as any).id === 'number'
  );
};

/**
 * Medical-specific content filters
 */

/**
 * Filter content suitable for medical display
 */
export const filterMedicalContent = <T extends { status?: string }>(items: T[]): T[] => {
  return items.filter((item) => item.status === 'publish' || item.status === undefined);
};

/**
 * Sort content by medical priority (latest first, then by relevance)
 */
export const sortByMedicalPriority = <T extends { date?: string; modified?: string }>(items: T[]): T[] => {
  return [...items].sort((a, b) => {
    const dateA = new Date(a.modified || a.date || 0).getTime();
    const dateB = new Date(b.modified || b.date || 0).getTime();
    return dateB - dateA; // Latest first
  });
};
